# -*- coding: utf-8 -*-
"""Neural Network from scratch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iINH2BHA2SDOL5Ji-a53pKuiQzI8UB_P
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle competitions download -c digit-recognizer

import zipfile
zip_ref = zipfile.ZipFile("/content/digit-recognizer.zip", "r")
zip_ref.extractall("/content")
zip_ref.close()

data = pd.read_csv("/content/train.csv")
data.head()

#change to numpy
data_n= np.array(data)
np.random.shuffle(data_n)
m,n = data_n.shape
#transpose
data_train =data_n[1000:m].T
Y_train = data_train[0].reshape(1, -1)
X_train = data_train[1:n]
X_train = X_train / 255.
_, m_train = X_train.shape

def init_params():
  W1 = np.random.rand(10, 784) - 0.5
  b1 = np.random.rand(10, 1) - 0.5

  W2 = np.random.rand(10, 10) - 0.5
  b2 = np.random.rand(10, 1) - 0.5

  return W1, b1, W2, b2

def Relu(z, d=False):
  if not d:
    return np.maximum(z, 0)
  else :
    return z > 0

def one_hot(Y):
  one_hot_Y = np.zeros((Y.size, Y.max() + 1))
  one_hot_Y[np.arange(Y.size), Y] = 1
  return one_hot_Y

def softmax(z):
  A = np.exp(z) / sum(np.exp(z))
  return A

def forward_prop(W1, b1, W2, b2, X):
  Z1 = W1.dot(X) + b1
  A1 = Relu(Z1)

  Z2 = W2.dot(A1) + b2
  A2 = softmax(Z2)

  return Z1, A1, Z2, A2

def back_prop(Z1,Z2, A1, A2, X, Y, W1, W2):
  one_hot_y = one_hot(Y)
  dZ2 = A2 - one_hot_y.T
  dW2 = 1 / m * dZ2.dot(A1.T)
  db2 = 1 / m * np.sum(dZ2)
  dZ1 = W2.T.dot(dZ2) * Relu(Z1, d=True)
  dW1 = 1 / m * dZ1.dot(X.T)
  db1 = 1 / m * np.sum(dZ1)
  return dW1, db1, dW2, db2

def update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha):
  W1 = W1 - alpha * dW1
  b1 = b1 - alpha * db1
  W2 = W2 - alpha * dW2
  b2 = b2 - alpha * db2

  return W1, b1, W2, b2

def get_predictions(A2):
  return np.argmax(A2, 0)

def get_accuracy(predictions, Y):
  print(predictions, Y)
  return np.sum(predictions == Y) / Y.size

def gradient_descent(X, Y, alpha, epochs):
  W1, b1, W2, b2  = init_params()
  for i in range(epochs):
    Z1, A1, Z2, A2 = forward_prop(W1, b1, W2, b2, X)
    dW1, db1, dW2, db2 = back_prop(Z1,Z2, A1, A2, X, Y, W1, W2)
    W1, b1, W2, b2 = update_params(W1, b1, W2, b2, dW1, db1, dW2, db2, alpha)

    if i % 10 == 0:
      print("Iteration: ", i)
      predictions = get_predictions(A2)
      print(get_accuracy(predictions, Y))
  return W1, b1, W2, b2

print("X_train shape:", X_train.shape)   # Expect (784, m)
W1, b1, W2, b2 = gradient_descent(X_train, Y_train, 0.10, 100)

from google.colab import drive
drive.mount('/content/drive')

def make_predictions(X, W1, b1, W2, b2):
  _, _, _, A2 = forward_prop(W1, b1, W2, b2, X)
  predictions = get_predictions(A2)
  return predictions

def test_predictions(index, W1, b1, W2, b2):
  current_image = X_train[:, index, None]
  prediction = make_predictions(X_train[:, index, None], W1, b1, W2, b2)
  label = Y_train[0, index]
  print("Prediction: ", prediction)
  print("Label: ", label)

  current_image = current_image.reshape((28, 28)) * 255
  plt.gray()
  plt.imshow(current_image, interpolation='nearest')
  plt.show()

  def get_accuracy(predictions, Y):
    """
    predictions : (m,) int  — output of get_predictions(A2)
    Y           : (1, m) int
    """
    return np.mean(predictions == Y.flatten()) * 100

# ---- make a 10 % hold-out validation set ----
val_fraction = 0.1          # 10 % of the data
m            = X_train.shape[1]
val_size     = int(m * val_fraction)

# last val_size columns → validation
X_val = X_train[:, -val_size:]
Y_val = Y_train[:, -val_size:]

# remaining columns → new training set
X_train = X_train[:, :-val_size]
Y_train = Y_train[:, :-val_size]

print("Train  :", X_train.shape, Y_train.shape)
print("Val    :", X_val.shape,  Y_val.shape)

# 1. Train (or load) parameters
W1, b1, W2, b2 = gradient_descent(X_train, Y_train, alpha=0.10, epochs=100)

# 2. Check a few random images
for idx in [0, 123, 4567]:
    test_predictions(idx, W1, b1, W2, b2)

# 3. Evaluate accuracy on the whole training set
train_preds = make_predictions(X_train, W1, b1, W2, b2)
print("Training accuracy: {:.2f}%".format(get_accuracy(train_preds, Y_train)))

# 4. Do the same on a held-out validation/test set if you have one
val_preds = make_predictions(X_val, W1, b1, W2, b2)
print("Validation accuracy: {:.2f}%".format(get_accuracy(val_preds, Y_val)))

import tensorflow as tf
import cv2 as cv

!kaggle datasets download tongpython/cat-and-dog

import zipfile
zip_ref = zipfile.ZipFile("/content/cat-and-dog.zip", "r")
zip_ref.extractall("/content")
zip_ref.close()

import random
import os
import matplotlib.pyplot as mpimg

def check_image(name="cats", return_img=False):
  files = os.listdir(f"/content/training_set/training_set/{name}")
  length = len(files)
  r= random.randint(0, length-1)
  img = mpimg.imread(f"/content/training_set/training_set/{name}/{files[r]}")

  if not return_img:
    plt.imshow(img)
    plt.show()
    print(img.shape)
  else:
    return img

check_image(name="cats")

check_image(name="dogs")

train_data_generator = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1/255.)
test_validate_data_generator = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1/255.)

train_data = train_data_generator.flow_from_directory(directory="/content/training_set/training_set", batch_size=32, target_size=(256,256), class_mode="binary", seed=16)
test_data = test_validate_data_generator.flow_from_directory(directory="/content/test_set/test_set", batch_size=32, target_size=(256,256), class_mode="binary", seed=16)

"""
InputLayer: (256,256,3) -> (x,y,z)
Hidden Layer:
-conv2d
-conv2d
-maxpool2d
-conv2d
-conv2d
-maxpool2d
-flatten

Output Layer: 2(dog  + cat)

"""

model_1 = tf.keras.Sequential([
    #input layer
    tf.keras.layers.Conv2D(32, (3,3), activation="relu", input_shape=(256,256,3)),
    tf.keras.layers.MaxPooling2D((2,2)),

    #hidden layers
    tf.keras.layers.Conv2D(64, (1,1), activation="relu"),
    tf.keras.layers.MaxPooling2D((2,2)),

    tf.keras.layers.Conv2D(128, (3,3), activation="relu"),
    tf.keras.layers.MaxPooling2D((2,2)),

    #OUTPUT LAYERS
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation="relu"),
    tf.keras.layers.Dropout(0.5), #REGULARIZATION
    tf.keras.layers.Dense(1, activation="sigmoid")
])

#compile the model

model_1.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer= tf.keras.optimizers.Adam(learning_rate=0.001),
    metrics=["accuracy"])

steps_per_epoch = train_data.samples
validation_steps = test_data.samples

#Train the model
base_history = model_1.fit(train_data,
                           epochs=10,
                           steps_per_epoch=steps_per_epoch,
                           validation_data=test_data,
                           validation_steps=validation_steps)

#get image from URL
from PIL import Image
import requests
from io import BytesIO
import numpy as np
import matplotlib.pyplot as plt

def predict_from_url(url):
  response = requests.get(url)
  img = Image.open(BytesIO(response.content))

  #resize image
  img_ = np.array(img)
  img_ = tf.image.resize(img_, (256,256))
  img_ = img_ / 255.0 # Normalize pixel values to [0,1]
  img_ = np.expand_dims(img_, axis=0) # shape becomes (1,512,512,3)
  print(img_.shape)

  #prediction with new image
  prediction = model_1.predict(img_)
  print(prediction)

  if prediction < 0.5:
    print("Prediction: This is a Cat")
  else:
    print("Prediction: This is a Dog")

  #display image
  img = Image.open(BytesIO(response.content))
  plt.imshow(img)
  plt.show()

predict_from_url("https://upload.wikimedia.org/wikipedia/commons/7/74/A-Cat.jpg")

predict_from_url("https://i.ytimg.com/vi/SfLV8hD7zX4/maxresdefault.jpg")